<!-- course.handlebars -->
<script>
    let isFormDirty = false;
</script>
<div class="side-btn-wrapper lg:hidden">
    <button id="left-side-button" onclick='panMainContentLeft()'
            class="flex items-center bg-button-default hover:bg-button-hover active:bg-button-active focus-visible:outline-system-focus focus-visible:border-solid focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 text-primary-100 py-4 pl-4 pr-8 rounded-r-full">
        <i class="material-symbols-outlined cursor-pointer text-xxxl text-brand_red  transition ease-in-out duration-1000"
           aria-hidden="true">chevron_right</i>
        Kursuse menüü
    </button>
    <button id="right-side-button" onclick='panMainContentRight()'
            class="md:hidden flex items-center bg-button-default hover:bg-button-hover active:bg-button-active focus-visible:outline-system-focus focus-visible:border-solid focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 text-primary-100 py-4 pl-8 pr-4 rounded-l-full">
        Lehekülje menüü
        <i class="material-symbols-outlined cursor-pointer text-xxxl text-brand_red  transition ease-in-out duration-1000"
           aria-hidden="true">chevron_left</i>
    </button>
</div>

<div class="main-wrapper flex flex-row grow justify-between lg:px-6 lg:left-pan lg:right-pan">
    <aside class="left-side-menu">
        <!-- Refers to sidebar-left-course.handlebars fail in /partials folder -->
        {{> sidebar-left.course-edit }}
    </aside>

    <main id="main-content" class="main px-4 py-20 relative">

        <!-- Renders dynamic partial set by controller -->
        {{> (whichPartial partial) }}
    </main>
    <aside class="right-side-menu p-2">
        {{> sidebar-right.course-edit }}
    </aside>
</div>
<div class="fixed z-50 top-44 lg:top-40 lg:left-2/3 right-0">
    <button class="btn btn-success"
            onclick="submitEditForm()"
            id="saveBtn">
        Salvesta
    </button>
</div>
<div id="modal" class="hidden fixed top-0 left-0 w-full h-full items-center justify-center custom-backdrop z-10">
    <div class="card p-8 rounded shadow-md custom-modal-content bg-primary">
        <p class="mb-4 text-lg" id="delMsg"></p>
        <div class="flex justify-end">
            <button class="btn btn-primary mr-4" onclick="cancelAction()">Katkesta</button>
            <button class="btn btn-secondary" id="delOK">Kustuta</button>
        </div>
    </div>
</div>
<script>
    const form = document.getElementById('courseEditForm');
    let newFiles = [];

    form.addEventListener('input', () => {
        isFormDirty = true;
        document.getElementById('saveBtn').classList.add('border-4', 'border-system-focus');
    });

    function submitEditForm() {
        window.removeEventListener('beforeunload', beforeUnloadHandler);
        // concept and practice pages use one editor
        const editorElement = document.getElementById('editor');
        const contentElement = document.getElementById('content');
        if (editorElement && contentElement) {
            contentElement.value = editor.getMarkdown();
        }
        // general and lesson pages uses 2 editors
        const editor1Element = document.getElementById('editor1');
        const editor2Element = document.getElementById('editor2');
        const content1Element = document.getElementById('readmeContent');
        const content2Element = document.getElementById('materialsContent');
        if (editor1Element && content1Element) {
            content1Element.value = editor1.getMarkdown();
        }
        if (editor2Element && content2Element) {
            content2Element.value = editor2.getMarkdown();
        }
        if (newFiles.length > 0) {
            // Create a new FormData object
            const formData = new FormData(form);
            const element = document.getElementById('fileInput');
            const name = element.name;
            // Deletes an existing form data entry.
            formData.delete(name);
            // Append new data to the form
            newFiles.forEach(file => {
                formData.append(name, file);
            });
        }
        form.submit();
    }

    function cancelAction() {
        document.getElementById('modal').style.display = 'none';
    }

    const beforeUnloadHandler = (event) => {
        if (isFormDirty) {
            event.returnValue = 'Kas soovite kindlasti lahkuda? Teil on salvestamata muudatusi.'; // For older browsers
            return 'Kas soovite kindlasti lahkuda? Teil on salvestamata muudatusi.'; // Standard
        }
    };

    window.addEventListener('beforeunload', beforeUnloadHandler);

    document.getElementById('unpublish').addEventListener('click', function (event) {
        event.preventDefault();
        const confirmation = confirm('Kas oled kindel, et tahad kõik muudatused tühistada?');
        if (confirmation) {
            fetch('/course-edit/unpublish/' + document.getElementById('courseId').value, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            }).then((res) => {
                if (res.ok) {
                    window.location.href = '/course-edit/' + document.getElementById('courseId').value;
                }
            });
        }
    });

</script>

